{"version":3,"sources":["index.js"],"names":["refs","datetime","document","querySelector","days","hours","mins","secs","timeIsOver","getTodayData","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","minutes","getMinutes","hour","getHours","setAttribute","CountdownTimer","constructor","onTick","onTimeIsOver","intervalId","targetDate","init","data","time","getTimeComponents","start","setInterval","currentTime","now","deltaTime","clearInterval","stop","pad","Math","floor","value","String","padStart","countdownTimer","selector","updateClockface","addStringTimeIsOver","handleOnInput","e","target","valueAsNumber","textContent","addEventListener"],"mappings":";;;AA0HC,aA1HD,QAAA,oBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,aACjCC,KAAMF,SAASC,cAAc,2BAC7BE,MAAOH,SAASC,cAAc,4BAC9BG,KAAMJ,SAASC,cAAc,2BAC7BI,KAAML,SAASC,cAAc,2BAC7BK,WAAYN,SAASC,cAAc,gBAIrC,SAASM,IACHC,IAAAA,EAAQ,IAAIC,KACZC,EAAKF,EAAMG,UACXC,EAAKJ,EAAMK,WAAa,EACtBC,MAAAA,EAAON,EAAMO,cACfC,IAAAA,EAAUR,EAAMS,aAChBC,EAAOV,EAAMW,WAeVX,OAdHE,EAAK,KACPA,EAAK,IAAMA,GAETE,EAAK,KACPA,EAAK,IAAMA,GAETM,EAAO,KACTA,EAAO,IAAMA,GAEXF,EAAU,KACZA,EAAU,IAAMA,GAGlBR,EAAQM,EAAO,IAAMF,EAAK,IAAMF,EAAK,IAAMQ,EAAO,IAAMF,EAM1DlB,EAAKC,SAASqB,aAAa,MAAOb,KAElC,MAAMc,EACJC,aAAY,OAAEC,EAAF,aAAUC,IACfC,KAAAA,WAAa,KACbC,KAAAA,WAAa,KACbH,KAAAA,OAASA,EACTC,KAAAA,aAAeA,EAEfG,KAAAA,OAEHC,WACK,OAAA,KAAKF,WAEVE,SAAK7B,GACF2B,KAAAA,WAAa3B,EAGpB4B,OACQE,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BP,KAAAA,OAAOM,GAEdE,QACON,KAAAA,WAAaO,YAAY,KAEtBC,MAAAA,EAAcxB,KAAKyB,MAAQ,MAC3BC,EAAY,KAAKT,WAAaO,EAC9BJ,EAAO,KAAKC,kBAAkBK,GAChCN,EAAK3B,KAAO,GAAK2B,EAAK1B,MAAQ,GAAK0B,EAAKzB,KAAO,GAAKyB,EAAKxB,KAAO,GAClE+B,cAAc,KAAKX,YACdE,KAAAA,OACAH,KAAAA,gBAEAD,KAAAA,OAAOM,IAEb,KAELQ,OACED,cAAc,KAAKX,YACdE,KAAAA,OAGPG,kBAAkBD,GAQT,MAAA,CAAE3B,KAPI,KAAKoC,IAAIC,KAAKC,MAAMX,EAAQ,QAO1B1B,MAND,KAAKmC,IACjBC,KAAKC,MAAOX,EAAQ,MAAyB,OAKzBzB,KAHT,KAAKkC,IAAIC,KAAKC,MAAOX,EAAQ,KAAoB,MAGlCxB,KAFf,KAAKiC,IAAIC,KAAKC,MAAOX,EAAQ,IAAc,OAI1DS,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAiB,IAAIvB,EAAe,CACxCwB,SAAU,WACVtB,OAAQuB,EACRtB,aAAcuB,IAKhB,SAASC,EAAcC,GACjBA,EAAEC,OAAOT,OACXG,EAAehB,KAAOqB,EAAEC,OAAOC,cAC/BP,EAAeb,UAEfa,EAAehB,KAAO,KACtBgB,EAAeP,QAInB,SAASS,GAAgB,KAAE5C,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5CP,EAAKI,KAAKkD,eAAiBlD,IAC3BJ,EAAKK,MAAMiD,eAAiBjD,IAC5BL,EAAKM,KAAKgD,eAAiBhD,IAC3BN,EAAKO,KAAK+C,eAAiB/C,IAG7B,SAAS0C,IACPjD,EAAKQ,WAAW8C,YAAc,0BApBhCtD,EAAKC,SAASsD,iBAAiB,QAASL","file":"src.5a483697.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  datetime: document.querySelector('#datetime'),\n  days: document.querySelector('span[data-value=\"days\"]'),\n  hours: document.querySelector('span[data-value=\"hours\"]'),\n  mins: document.querySelector('span[data-value=\"mins\"]'),\n  secs: document.querySelector('span[data-value=\"secs\"]'),\n  timeIsOver: document.querySelector('.timeIsOver'),\n};\n\n//Finding time now in format for min-attribute in input\nfunction getTodayData() {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth() + 1; // Месяца идут с 0, так что добавляем 1.\n  const yyyy = today.getFullYear();\n  let minutes = today.getMinutes();\n  let hour = today.getHours();\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n  if (hour < 10) {\n    hour = '0' + hour;\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  today = yyyy + '-' + mm + '-' + dd + 'T' + hour + ':' + minutes;\n  return today;\n}\n\n// console.log(today);\n\nrefs.datetime.setAttribute('min', getTodayData());\n\nclass CountdownTimer {\n  constructor({ onTick, onTimeIsOver }) {\n    this.intervalId = null;\n    this.targetDate = null;\n    this.onTick = onTick;\n    this.onTimeIsOver = onTimeIsOver;\n\n    this.init();\n  }\n  get data() {\n    return this.targetDate;\n  }\n  set data(datetime) {\n    this.targetDate = datetime;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      //Plus 3 hours - Ukraine's time zone\n      const currentTime = Date.now() + 3 * 1000 * 60 * 60;\n      const deltaTime = this.targetDate - currentTime;\n      const time = this.getTimeComponents(deltaTime);\n      if (time.days < 1 && time.hours < 1 && time.mins < 1 && time.secs < 1) {\n        clearInterval(this.intervalId);\n        this.init();\n        this.onTimeIsOver();\n      } else {\n        this.onTick(time);\n      }\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.init();\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  onTick: updateClockface,\n  onTimeIsOver: addStringTimeIsOver,\n});\n\nrefs.datetime.addEventListener('input', handleOnInput);\n\nfunction handleOnInput(e) {\n  if (e.target.value) {\n    countdownTimer.data = e.target.valueAsNumber;\n    countdownTimer.start();\n  } else {\n    countdownTimer.data = null;\n    countdownTimer.stop();\n  }\n}\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n\nfunction addStringTimeIsOver() {\n  refs.timeIsOver.textContent = 'Congrats! Time is over!';\n}\n"]}