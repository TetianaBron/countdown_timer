{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","CountdownTimer","constructor","targetDate","onTick","intervalId","init","time","getTimeComponents","start","setInterval","currentTime","Date","now","deltaTime","clearInterval","pad","Math","floor","value","String","padStart","countdownTimer","selector","updateClockface","textContent"],"mappings":";;;AA8DC,aA9DD,QAAA,oBAEA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,4BAG/B,MAAMI,EACJC,aAAY,WAAEC,EAAF,OAAcC,IACnBC,KAAAA,WAAa,KACbF,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EAETE,KAAAA,OAGPA,OACQC,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BJ,KAAAA,OAAOG,GAEdE,QACOJ,KAAAA,WAAaK,YAAY,KACtBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKX,WAAaQ,EAC9BJ,EAAO,KAAKC,kBAAkBM,GAChCP,EAAKZ,KAAO,GAAKY,EAAKT,MAAQ,GAAKS,EAAKR,KAAO,GAAKQ,EAAKP,KAAO,EAClEe,cAAc,KAAKV,YAEdD,KAAAA,OAAOG,IAEb,KAELC,kBAAkBD,GAQT,MAAA,CAAEZ,KAPI,KAAKqB,IAAIC,KAAKC,MAAMX,EAAQ,QAO1BT,MAND,KAAKkB,IACjBC,KAAKC,MAAOX,EAAQ,MAAyB,OAKzBR,KAHT,KAAKiB,IAAIC,KAAKC,MAAOX,EAAQ,KAAoB,MAGlCP,KAFf,KAAKgB,IAAIC,KAAKC,MAAOX,EAAQ,IAAc,OAI1DS,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAiB,IAAIrB,EAAe,CACxCsB,SAAU,WACVpB,WAAY,IAAIS,KAAK,gBACrBR,OAAQoB,IAKV,SAASA,GAAgB,KAAE7B,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC5CN,EAAKC,KAAK8B,eAAiB9B,IAC3BD,EAAKI,MAAM2B,eAAiB3B,IAC5BJ,EAAKK,KAAK0B,eAAiB1B,IAC3BL,EAAKM,KAAKyB,eAAiBzB,IAN7BsB,EAAeb","file":"src.7a87dbf7.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  days: document.querySelector('span[data-value=\"days\"]'),\n  hours: document.querySelector('span[data-value=\"hours\"]'),\n  mins: document.querySelector('span[data-value=\"mins\"]'),\n  secs: document.querySelector('span[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n  constructor({ targetDate, onTick }) {\n    this.intervalId = null;\n    this.targetDate = targetDate;\n    this.onTick = onTick;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = this.targetDate - currentTime;\n      const time = this.getTimeComponents(deltaTime);\n      if (time.days < 1 && time.hours < 1 && time.mins < 1 && time.secs < 1) {\n        clearInterval(this.intervalId);\n      } else {\n        this.onTick(time);\n      }\n    }, 1000);\n  }\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jan 01, 2022'),\n  onTick: updateClockface,\n});\n\ncountdownTimer.start();\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n"]}