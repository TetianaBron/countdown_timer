{"version":3,"sources":["index.js"],"names":["sound","require","refs","datetime","document","querySelector","days","hours","mins","secs","timeIsOver","getTodayData","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","minutes","getMinutes","hour","getHours","setAttribute","CountdownTimer","constructor","audio","onTick","onTimeIsOver","removeStringTimeIsOver","setItemtoLocalStorage","getItemFromLocalStorage","clearLocalStorage","playAudio","stopAudio","intervalId","targetDate","init","data","time","getTimeComponents","start","setInterval","currentTime","now","deltaTime","clearInterval","muted","stop","pad","Math","floor","value","String","padStart","countdownTimer","selector","updateClockface","Audio","addStringTimeIsOver","handleOnInput","e","target","valueAsNumber","populateInput","localStorage","getItem","textContent","setItem","removeItem","play","pause","addEventListener"],"mappings":"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","file":"src.e4ff54b7.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\nconst sound = require('./sound/sound.mp3');\n\nconst refs = {\n  datetime: document.querySelector('#datetime'),\n  days: document.querySelector('span[data-value=\"days\"]'),\n  hours: document.querySelector('span[data-value=\"hours\"]'),\n  mins: document.querySelector('span[data-value=\"mins\"]'),\n  secs: document.querySelector('span[data-value=\"secs\"]'),\n  timeIsOver: document.querySelector('.timeIsOver'),\n};\n\n//Finding time now in format for min-attribute in input\nfunction getTodayData() {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth() + 1; // Месяца идут с 0, так что добавляем 1.\n  const yyyy = today.getFullYear();\n  let minutes = today.getMinutes();\n  let hour = today.getHours();\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n  if (hour < 10) {\n    hour = '0' + hour;\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  today = yyyy + '-' + mm + '-' + dd + 'T' + hour + ':' + minutes;\n  return today;\n}\n\n// console.log(today);\n\nrefs.datetime.setAttribute('min', getTodayData());\n\nclass CountdownTimer {\n  constructor({\n    audio,\n    onTick,\n    onTimeIsOver,\n    removeStringTimeIsOver,\n    setItemtoLocalStorage,\n    getItemFromLocalStorage,\n    clearLocalStorage,\n    playAudio,\n    stopAudio,\n  }) {\n    this.intervalId = null;\n    this.targetDate = null;\n    this.audio = audio;\n    this.onTick = onTick;\n    this.onTimeIsOver = onTimeIsOver;\n    this.removeStringTimeIsOver = removeStringTimeIsOver;\n    this.setItemtoLocalStorage = setItemtoLocalStorage;\n    this.getItemFromLocalStorage = getItemFromLocalStorage;\n    this.clearLocalStorage = clearLocalStorage;\n    this.playAudio = playAudio;\n    this.stopAudio = stopAudio;\n\n    this.init();\n  }\n  get data() {\n    return this.targetDate;\n  }\n  set data(datetime) {\n    this.targetDate = datetime;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  start() {\n    this.stopAudio();\n    this.removeStringTimeIsOver();\n    this.setItemtoLocalStorage();\n    this.intervalId = setInterval(() => {\n      //Plus 3 hours - Ukraine's time zone\n      const currentTime = Date.now() + 2 * 1000 * 60 * 60; //+2 for winter-time, +3 for summer-time\n      const deltaTime = this.targetDate - currentTime;\n      const time = this.getTimeComponents(deltaTime);\n      if (time.days < 1 && time.hours < 1 && time.mins < 1 && time.secs < 1) {\n        clearInterval(this.intervalId);\n        this.init();\n        this.onTimeIsOver();\n        if (this.targetDate > currentTime) {\n          this.audio.muted = false; //without it chrome gives error\n          this.audio.currentTime = 0;\n          this.playAudio();\n        }\n      } else {\n        this.onTick(time);\n      }\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.init();\n    this.clearLocalStorage();\n    this.stopAudio();\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  onTick: updateClockface,\n  audio: new Audio(sound),\n  onTimeIsOver: addStringTimeIsOver,\n  removeStringTimeIsOver,\n  setItemtoLocalStorage,\n  getItemFromLocalStorage,\n  clearLocalStorage,\n  playAudio,\n  stopAudio,\n});\n\nrefs.datetime.addEventListener('input', handleOnInput);\n\nfunction handleOnInput(e) {\n  if (e.target.value) {\n    countdownTimer.data = e.target.valueAsNumber;\n    countdownTimer.start();\n  } else {\n    countdownTimer.data = null;\n    countdownTimer.stop();\n    countdownTimer.removeStringTimeIsOver();\n  }\n}\n\npopulateInput();\n\nfunction populateInput() {\n  if (localStorage.getItem('targetDate')) {\n    countdownTimer.getItemFromLocalStorage();\n    refs.datetime.valueAsNumber = countdownTimer.data;\n    countdownTimer.start();\n  }\n}\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n\nfunction addStringTimeIsOver() {\n  refs.timeIsOver.textContent = 'Congrats! Time is over!';\n}\n\nfunction removeStringTimeIsOver() {\n  if (refs.timeIsOver.textContent === '') {\n    return;\n  }\n  refs.timeIsOver.textContent = '';\n}\n\nfunction setItemtoLocalStorage() {\n  localStorage.setItem('targetDate', countdownTimer.data);\n}\n\nfunction getItemFromLocalStorage() {\n  countdownTimer.data = localStorage.getItem('targetDate');\n}\n\nfunction clearLocalStorage() {\n  localStorage.removeItem('targetDate');\n}\n\nfunction playAudio() {\n  countdownTimer.audio.play();\n}\n\nfunction stopAudio() {\n  countdownTimer.audio.pause();\n}\n"]}