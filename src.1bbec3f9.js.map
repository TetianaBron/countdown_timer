{"version":3,"sources":["index.js"],"names":["sound","require","refs","datetime","document","querySelector","days","hours","mins","secs","timeIsOver","getTodayData","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","minutes","getMinutes","hour","getHours","setAttribute","CountdownTimer","constructor","onTick","onTimeIsOver","removeStringTimeIsOver","setItemtoLocalStorage","getItemFromLocalStorage","clearLocalStorage","playAudio","intervalId","targetDate","init","data","time","getTimeComponents","start","setInterval","currentTime","now","deltaTime","clearInterval","stop","pad","Math","floor","value","String","padStart","countdownTimer","selector","updateClockface","addStringTimeIsOver","handleOnInput","e","target","valueAsNumber","populateInput","localStorage","getItem","textContent","setItem","removeItem","Audio","play","addEventListener"],"mappings":";;;;;AAoLC,aApLD,QAAA,oBACA,MAAMA,EAAQC,QAAQ,qBAEhBC,EAAO,CACXC,SAAUC,SAASC,cAAc,aACjCC,KAAMF,SAASC,cAAc,2BAC7BE,MAAOH,SAASC,cAAc,4BAC9BG,KAAMJ,SAASC,cAAc,2BAC7BI,KAAML,SAASC,cAAc,2BAC7BK,WAAYN,SAASC,cAAc,gBAIrC,SAASM,IACHC,IAAAA,EAAQ,IAAIC,KACZC,EAAKF,EAAMG,UACXC,EAAKJ,EAAMK,WAAa,EACtBC,MAAAA,EAAON,EAAMO,cACfC,IAAAA,EAAUR,EAAMS,aAChBC,EAAOV,EAAMW,WAeVX,OAdHE,EAAK,KACPA,EAAK,IAAMA,GAETE,EAAK,KACPA,EAAK,IAAMA,GAETM,EAAO,KACTA,EAAO,IAAMA,GAEXF,EAAU,KACZA,EAAU,IAAMA,GAGlBR,EAAQM,EAAO,IAAMF,EAAK,IAAMF,EAAK,IAAMQ,EAAO,IAAMF,EAM1DlB,EAAKC,SAASqB,aAAa,MAAOb,KAElC,MAAMc,EACJC,aAAY,OACVC,EADU,aAEVC,EAFU,uBAGVC,EAHU,sBAIVC,EAJU,wBAKVC,EALU,kBAMVC,EANU,UAOVC,IAEKC,KAAAA,WAAa,KACbC,KAAAA,WAAa,KACbR,KAAAA,OAASA,EACTC,KAAAA,aAAeA,EACfC,KAAAA,uBAAyBA,EACzBC,KAAAA,sBAAwBA,EACxBC,KAAAA,wBAA0BA,EAC1BC,KAAAA,kBAAoBA,EACpBC,KAAAA,UAAYA,EAEZG,KAAAA,OAEHC,WACK,OAAA,KAAKF,WAEVE,SAAKlC,GACFgC,KAAAA,WAAahC,EAGpBiC,OACQE,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BZ,KAAAA,OAAOW,GAEdE,QACOX,KAAAA,yBACAC,KAAAA,wBACAI,KAAAA,WAAaO,YAAY,KAEtBC,MAAAA,EAAc7B,KAAK8B,MAAQ,MAC3BC,EAAY,KAAKT,WAAaO,EAC9BJ,EAAO,KAAKC,kBAAkBK,GAChCN,EAAKhC,KAAO,GAAKgC,EAAK/B,MAAQ,GAAK+B,EAAK9B,KAAO,GAAK8B,EAAK7B,KAAO,GAClEoC,cAAc,KAAKX,YACdE,KAAAA,OACAR,KAAAA,eACAK,KAAAA,aAEAN,KAAAA,OAAOW,IAEb,KAELQ,OACED,cAAc,KAAKX,YACdE,KAAAA,OACAJ,KAAAA,oBAGPO,kBAAkBD,GAQT,MAAA,CAAEhC,KAPI,KAAKyC,IAAIC,KAAKC,MAAMX,EAAQ,QAO1B/B,MAND,KAAKwC,IACjBC,KAAKC,MAAOX,EAAQ,MAAyB,OAKzB9B,KAHT,KAAKuC,IAAIC,KAAKC,MAAOX,EAAQ,KAAoB,MAGlC7B,KAFf,KAAKsC,IAAIC,KAAKC,MAAOX,EAAQ,IAAc,OAI1DS,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAiB,IAAI5B,EAAe,CACxC6B,SAAU,WACV3B,OAAQ4B,EACR3B,aAAc4B,EACd3B,uBAAAA,EACAC,sBAAAA,EACAC,wBAAAA,EACAC,kBAAAA,EACAC,UAAAA,IAKF,SAASwB,EAAcC,GACjBA,EAAEC,OAAOT,OACXG,EAAehB,KAAOqB,EAAEC,OAAOC,cAC/BP,EAAeb,UAEfa,EAAehB,KAAO,KACtBgB,EAAeP,OACfO,EAAexB,0BAMnB,SAASgC,IACHC,aAAaC,QAAQ,gBACvBV,EAAetB,0BACf7B,EAAKC,SAASyD,cAAgBP,EAAehB,KAC7CgB,EAAeb,SAInB,SAASe,GAAgB,KAAEjD,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5CP,EAAKI,KAAK0D,eAAiB1D,IAC3BJ,EAAKK,MAAMyD,eAAiBzD,IAC5BL,EAAKM,KAAKwD,eAAiBxD,IAC3BN,EAAKO,KAAKuD,eAAiBvD,IAG7B,SAAS+C,IACPtD,EAAKQ,WAAWsD,YAAc,0BAGhC,SAASnC,IAC6B,KAAhC3B,EAAKQ,WAAWsD,cAGpB9D,EAAKQ,WAAWsD,YAAc,IAGhC,SAASlC,IACPgC,aAAaG,QAAQ,aAAcZ,EAAehB,MAGpD,SAASN,IACPsB,EAAehB,KAAOyB,aAAaC,QAAQ,cAG7C,SAAS/B,IACP8B,aAAaI,WAAW,cAG1B,SAASjC,IACO,IAAIkC,MAAMnE,GAClBoE,OAvDRlE,EAAKC,SAASkE,iBAAiB,QAASZ,GAaxCI","file":"src.1bbec3f9.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\nconst sound = require('./sound/sound.mp3');\n\nconst refs = {\n  datetime: document.querySelector('#datetime'),\n  days: document.querySelector('span[data-value=\"days\"]'),\n  hours: document.querySelector('span[data-value=\"hours\"]'),\n  mins: document.querySelector('span[data-value=\"mins\"]'),\n  secs: document.querySelector('span[data-value=\"secs\"]'),\n  timeIsOver: document.querySelector('.timeIsOver'),\n};\n\n//Finding time now in format for min-attribute in input\nfunction getTodayData() {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth() + 1; // Месяца идут с 0, так что добавляем 1.\n  const yyyy = today.getFullYear();\n  let minutes = today.getMinutes();\n  let hour = today.getHours();\n  if (dd < 10) {\n    dd = '0' + dd;\n  }\n  if (mm < 10) {\n    mm = '0' + mm;\n  }\n  if (hour < 10) {\n    hour = '0' + hour;\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  today = yyyy + '-' + mm + '-' + dd + 'T' + hour + ':' + minutes;\n  return today;\n}\n\n// console.log(today);\n\nrefs.datetime.setAttribute('min', getTodayData());\n\nclass CountdownTimer {\n  constructor({\n    onTick,\n    onTimeIsOver,\n    removeStringTimeIsOver,\n    setItemtoLocalStorage,\n    getItemFromLocalStorage,\n    clearLocalStorage,\n    playAudio,\n  }) {\n    this.intervalId = null;\n    this.targetDate = null;\n    this.onTick = onTick;\n    this.onTimeIsOver = onTimeIsOver;\n    this.removeStringTimeIsOver = removeStringTimeIsOver;\n    this.setItemtoLocalStorage = setItemtoLocalStorage;\n    this.getItemFromLocalStorage = getItemFromLocalStorage;\n    this.clearLocalStorage = clearLocalStorage;\n    this.playAudio = playAudio;\n\n    this.init();\n  }\n  get data() {\n    return this.targetDate;\n  }\n  set data(datetime) {\n    this.targetDate = datetime;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  start() {\n    this.removeStringTimeIsOver();\n    this.setItemtoLocalStorage();\n    this.intervalId = setInterval(() => {\n      //Plus 3 hours - Ukraine's time zone\n      const currentTime = Date.now() + 3 * 1000 * 60 * 60;\n      const deltaTime = this.targetDate - currentTime;\n      const time = this.getTimeComponents(deltaTime);\n      if (time.days < 1 && time.hours < 1 && time.mins < 1 && time.secs < 1) {\n        clearInterval(this.intervalId);\n        this.init();\n        this.onTimeIsOver();\n        this.playAudio();\n      } else {\n        this.onTick(time);\n      }\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.init();\n    this.clearLocalStorage();\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  onTick: updateClockface,\n  onTimeIsOver: addStringTimeIsOver,\n  removeStringTimeIsOver,\n  setItemtoLocalStorage,\n  getItemFromLocalStorage,\n  clearLocalStorage,\n  playAudio,\n});\n\nrefs.datetime.addEventListener('input', handleOnInput);\n\nfunction handleOnInput(e) {\n  if (e.target.value) {\n    countdownTimer.data = e.target.valueAsNumber;\n    countdownTimer.start();\n  } else {\n    countdownTimer.data = null;\n    countdownTimer.stop();\n    countdownTimer.removeStringTimeIsOver();\n  }\n}\n\npopulateInput();\n\nfunction populateInput() {\n  if (localStorage.getItem('targetDate')) {\n    countdownTimer.getItemFromLocalStorage();\n    refs.datetime.valueAsNumber = countdownTimer.data;\n    countdownTimer.start();\n  }\n}\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n\nfunction addStringTimeIsOver() {\n  refs.timeIsOver.textContent = 'Congrats! Time is over!';\n}\n\nfunction removeStringTimeIsOver() {\n  if (refs.timeIsOver.textContent === '') {\n    return;\n  }\n  refs.timeIsOver.textContent = '';\n}\n\nfunction setItemtoLocalStorage() {\n  localStorage.setItem('targetDate', countdownTimer.data);\n}\n\nfunction getItemFromLocalStorage() {\n  countdownTimer.data = localStorage.getItem('targetDate');\n}\n\nfunction clearLocalStorage() {\n  localStorage.removeItem('targetDate');\n}\n\nfunction playAudio() {\n  const audio = new Audio(sound);\n  audio.play();\n}\n"]}